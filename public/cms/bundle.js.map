{"version":3,"file":"bundle.js","sources":["../../node_modules/npm-dom-helper/index.js","src/components/input-acl.js","src/components/single-entity.js","src/common/image-resize.js","src/service/headers.js","src/service/users.js","src/common/current-user.js","src/components/grid.js","src/components/users.js","src/service/menus.js","src/components/menus.js","src/service/articles.js","src/components/articles.js","src/service/products.js","src/components/products.js","src/service/macros.js","src/components/macro.js","src/components/macros.js","src/service/news.js","src/components/news.js","src/service/covers.js","src/components/covers.js","src/service/events.js","src/components/events.js"],"sourcesContent":["window.getEl = (el, ref) => {\r\n    el = el || window.document.body\r\n    let result = el.querySelector(`[data-ref='${ref || ''}']`)\r\n    if (result) {\r\n        return result\r\n    }\r\n\r\n    return el.querySelector(ref)\r\n}\r\n\r\nwindow.getParent = (el, selector) => {\r\n    if (! (el && selector)) {\r\n        return null;\r\n    }\r\n\r\n    let parent = el.parentElement;\r\n    do {\r\n        if (! parent) {\r\n            return null;\r\n        } else if (parent.matches(selector)) {\r\n            return parent;\r\n        }\r\n        parent = parent.parentElement;\r\n    } while (true);\r\n}\r\n\r\nwindow.getParents = (el, selector) => {\r\n    let result = [];\r\n\r\n    if (! (el && selector)) {\r\n        return result;\r\n    }\r\n\r\n    let parent = el.parentElement;\r\n    while (parent) {        \r\n        parent.matches(selector) && result.push(parent);        \r\n        parent = parent.parentElement;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nwindow.elUpLevel = (el, levels) => {\r\n    if (!(el && levels) || isNaN(levels) || levels<0) {\r\n        return el\r\n    }\r\n\r\n    let result = el;\r\n    for (let i=0; i<levels; i++) {\r\n        result = result.parentElement || result\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nwindow.limitText = (str, size, onlyXs, removeDots) => {\r\n    if (onlyXs && (window.innerWidth > 600)) {\r\n        size *= 2\r\n    }\r\n\r\n    if (str.length < size) {\r\n        return str\r\n    }\r\n\r\n    return `${str.substr(0, size-1)}${removeDots ? '' : '...'}`\r\n}\r\n\r\nwindow.elClassToggle = (el, className) => {\r\n    if (! (el && className)) {\r\n        return\r\n    }\r\n    if (el.classList && el.classList.toggle) {\r\n        return el.classList.toggle(className)\r\n    }\r\n    \r\n    // Damn IE10\r\n    el.className = el.className.indexOf(className) === -1 ?\r\n                    (el.className += ` ${className}`) :\r\n                    el.className.split(className).join('');\r\n}\r\n\r\nwindow.hasClass = (el, className) => {\r\n    return (el.className || '').indexOf(className) !== -1\r\n}\r\n\r\nwindow.addClasses = (els, className) => {\r\n    els.forEach((el) => addClass(el, className))\r\n}\r\n\r\nwindow.removeClasses = (els, className) => {\r\n    els.forEach((el) => removeClass(el, className))\r\n}\r\n\r\nwindow.addClass = (el, className) => {\r\n    if (! (el && className)) {\r\n        return;\r\n    }\r\n\r\n    el.className = el.className || ''\r\n    el.className += ` ${className}`\r\n\r\n    return el;\r\n}\r\n\r\nwindow.removeClass = (el, className) => {\r\n    if (! (el && className)) {\r\n        return;\r\n    }\r\n\r\n    el.className = el.className || ''\r\n    el.className = el.className.split(className).join('')\r\n\r\n    return el;\r\n}\r\n\r\nwindow.getEls = (el, selector) => {\r\n    if (! (el && selector)) {\r\n        return;\r\n    }\r\n\r\n    let result = []\r\n    let els = el.querySelectorAll(selector)\r\n    for (let i=0; i<els.length; i++) {\r\n        result.push(els[i])\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nwindow.killEl = (el) => {\r\n    if (! (el && el.parentElement)) {\r\n        return;\r\n    }\r\n\r\n    el.parentElement.removeChild(el)\r\n}\r\n\r\nwindow.killEls = (els) => {\r\n    els.forEach((el) => killEl(el))\r\n}\r\n\r\nwindow.createEl = (tagName, className, parent, textContent) => {\r\n    let el = document.createElement(tagName)\r\n    el.className = className || ''\r\n    if (textContent) {\r\n        el.textContent = textContent\r\n    }\r\n    parent.appendChild(el)\r\n\r\n    return el;\r\n}\r\n\r\nwindow.createEls = (tagName, className, parent, childs, textContent) => {\r\n    let el = createEl(tagName, className, parent, textContent);\r\n\r\n    (parent || document.body).appendChild(el);\r\n    (childs || []).forEach((child) => {\r\n        let childEl = createEls(child.tag, child.className, \r\n                                el, child.children, child.textContent);\r\n        if (child.bootstrap) {\r\n            child.bootstrap(childEl)\r\n        }\r\n        if (child.on && child.on.length === 2) {\r\n            childEl.addEventListener(child.on[0], child.on[1].bind(child))\r\n        }\r\n        if (child.type) {\r\n            childEl.type = child.type\r\n            childEl.name = child.name\r\n        }\r\n        if (child.attrs) {\r\n            for (let i in child.attrs) {\r\n                childEl.setAttribute(i, child.attrs[i])\r\n            }\r\n        }\r\n    })\r\n    \r\n    return el\r\n}\r\n\r\nwindow.elRemoveEvt = (el) => {\r\n    let clone = el.cloneNode()\r\n    clone.innerHTML = el.innerHTML\r\n    if (! el.parentNode) {\r\n        return null\r\n    }\r\n    el.parentNode.replaceChild(clone, el)\r\n\r\n    return clone\r\n}\r\n\r\n\r\nexport default 1","const screens = [\r\n    {name: 'user', label: 'Usuários'},\r\n    {name: 'menu', label: 'Menus'},\r\n    {name: 'article', label: 'Artigos'},\r\n    {name: 'product', label: 'Produtos'},\r\n    {name: 'macros', label: 'Macros'},\r\n    {name: 'new', label: 'Notícias'},\r\n    {name: 'cover', label: 'Capas'},\r\n    {name: 'event', label: 'Eventos'}\r\n];\r\n\r\nexport default meta => ({tag: 'div', className: 'col-md-12', children: screens.map(screen => {\r\n    return {tag: 'label', className: 'mr-5', children: [\r\n        {tag: 'input', attrs: {type: 'checkbox', name: `acl_${screen.name}`, \r\n            skipbind: 1, acl: 1}, className: 'mr-1'},\r\n        {tag: 'span', textContent: screen.label}\r\n    ]};\r\n})});","import icon from './icon'\r\nimport {addEvent} from '../common/event'\r\n\r\nexport default field => {\r\n    let ddMenu;\r\n\r\n    if (! field.service) {\r\n        console.error(field, 'You forgot the service');\r\n        return {tag: 'div'};\r\n    }\r\n\r\n    if (! field.descriptionField) {\r\n        console.error(field, 'You forgot the descriptionField');\r\n        return {tag: 'div'};\r\n    }\r\n\r\n    const elements = {};\r\n\r\n    function cleanInput() {\r\n        elements.input.value = '';\r\n        elements.input.disabled = false;\r\n        elements.mainEl.dataset.value = '';\r\n        addClass(elements.remove, 'hidden');\r\n        elements.input.focus();\r\n    }\r\n    \r\n    return {\r\n        tag: 'div', \r\n        className: 'row',\r\n        children: [\r\n            {tag: 'div', className: 'col-md-10', children: [\r\n                {tag: 'input', className: 'form-control', bootstrap(el) {\r\n                    elements.input = el;\r\n                }}\r\n            ]},\r\n            {tag: 'div', className: 'col-md-2 hidden', \r\n                children: [icon('delete', 16, 16)], bootstrap(el) {\r\n                elements.remove = el;\r\n                el.addEventListener('click', () => cleanInput());\r\n                addEvent('form:reset', () => cleanInput());\r\n            }}\r\n        ],\r\n        bootstrap(el) {\r\n            elements.mainEl = el;\r\n            el.dataset.name = field.name;\r\n\r\n            function addItem(item) {\r\n                const textContent = item[field.descriptionField];\r\n                killEl(ddMenu);\r\n                el.dataset.value = item.id;\r\n                elements.input.disabled = true;\r\n                elements.input.value = textContent;\r\n                removeClass(elements.remove, 'hidden');\r\n            }\r\n\r\n            addEvent('form:edit', data => {\r\n                const obj = data[field.name];\r\n                if (obj && obj.id) {\r\n                    addItem(obj);\r\n                }\r\n            });\r\n\r\n            elements.input.addEventListener('keyup', () => {\r\n                window.inputSearchDebounce && window.clearTimeout(window.inputSearchDebounce);\r\n                window.inputSearchDebounce = setTimeout(async () => {\r\n                    if (ddMenu) {\r\n                        killEl(ddMenu);\r\n                    }\r\n\r\n                    if (! elements.input.value) {\r\n                        return;\r\n                    }\r\n\r\n                    let list = await field.service.retrieve(elements.input.value);  \r\n                    \r\n                    if (! list.length) {\r\n                        return;\r\n                    }\r\n\r\n                    ddMenu = createEls('div', 'dropdown-menu show dismissable', el, list.map(item => {\r\n                        const textContent = item[field.descriptionField];\r\n                        return {\r\n                            tag: 'a', \r\n                            className: 'dropdown-item', \r\n                            attrs: {href: 'javascript:;'}, \r\n                            textContent,\r\n                            on: ['click', () => addItem(item)]\r\n                        }\r\n                    }));\r\n                }, 600);\r\n            })\r\n        }\r\n    };\r\n}","function createCanvas(dimension) {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.style.position = 'fixed';\r\n    canvas.style.left = '-99999px';\r\n    canvas.width = dimension.width;\r\n    canvas.height = dimension.height;\r\n\r\n    return canvas;\r\n};\r\n\r\nexport default (src, dimension, compress) => new Promise((callback, error) => {\r\n    const image = new Image();\r\n    \r\n    image.onerror = () => error();\r\n\r\n    image.onload = function() {\r\n        let canvas,\r\n            ctx,\r\n            ratio,\r\n            image = this,\r\n            realWidth = image.width,\r\n            realHeight = image.height;\r\n\r\n        dimension = dimension || {};\r\n        if (dimension.width > dimension.height) {\r\n            image.width = dimension.width || 800;\r\n            ratio = (image.width * 100) / realWidth;\r\n            image.height = realHeight * (ratio / 100);\r\n        } else {\r\n            image.height = dimension.height || 600;\r\n            ratio = (image.height * 100) / realHeight;\r\n            image.width = realWidth * (ratio / 100);\r\n        }\r\n        canvas = createCanvas({ width: image.width, height: image.height });\r\n        document.body.appendChild(canvas);\r\n        ctx = canvas.getContext('2d');\r\n        ctx.drawImage(image, 0, 0, image.width, image.height);\r\n        callback(canvas.toDataURL('image/jpeg', compress || '0.5'));\r\n        document.body.removeChild(canvas);\r\n    };\r\n\r\n    image.src = src;\r\n});","const headers = {\r\n    'Accept': 'application/json, text/plain, */*',\r\n    'Content-Type': 'application/json'\r\n};\r\n\r\nif (sessionStorage.token) {\r\n    headers['Auth-Token'] = sessionStorage.token;\r\n}\r\n\r\nexport default headers;\r\n","import config from '../config';\r\nimport headers from './headers'\r\n\r\nexport default {\r\n\r\n    validate(data) {\r\n        let errors = '';\r\n\r\n        if (! data.name) {\r\n            errors += ' Informe o nome.';\r\n        }\r\n\r\n        if (! data.email) {\r\n            errors += ' Informe o e-mail.';\r\n        }\r\n\r\n        if (! data.phone) {\r\n            errors += ' Informe o telefone.';\r\n        }\r\n\r\n        if (! data.password) {\r\n            errors += ' Informe a senha.';\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    login: async auth => {\r\n        const response = await fetch(`${config.API_URL}/cms/login`, {\r\n            headers,\r\n            method: 'POST',\r\n            body: JSON.stringify(auth)\r\n        });        \r\n        const json = await response.json();\r\n        if (! json.token) {\r\n            return null;\r\n        }\r\n        sessionStorage.user = JSON.stringify(json);\r\n        sessionStorage.token = json.token;\r\n        \r\n        return json;\r\n    },\r\n\r\n    retrieve: async search => {\r\n        let response = await fetch(`${config.API_URL}/cms/user/${encodeURIComponent(search)}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n\r\n    create: async user => {\r\n        const response = await fetch(`${config.API_URL}/cms/user/`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(user)\r\n        });\r\n\r\n        let newUser = await response.json();\r\n\r\n        return newUser;\r\n    },\r\n\r\n\r\n    update: async (id, user) => {\r\n        const params = {id};\r\n        for (let i in user) {\r\n            params[`${i}`] = user[i];\r\n        }\r\n        const response = await fetch(`${config.API_URL}/cms/user/${id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params),\r\n            headers\r\n        });\r\n\r\n        let newUser = await response.json();\r\n\r\n        return newUser;\r\n    },\r\n\r\n\r\n    destroy: async id => fetch(`${config.API_URL}/cms/user/${id}`, {\r\n        headers,\r\n        method: 'DELETE'\r\n    })\r\n\r\n}","let currentUser;\r\n\r\nexport default function getCurrentUser() {\r\n    if (! currentUser) {\r\n        currentUser = JSON.parse(sessionStorage.user);\r\n    }\r\n\r\n    return currentUser;\r\n}","export default async ({columns, loadData, onEdit, onDelete}) => {\r\n    const div = document.createElement('div');\r\n    const table = document.createElement('table');\r\n    table.className = 'table table-bordered table-stripped';\r\n\r\n    table.innerHTML = `\r\n        <thead class=\"thead-dark\">\r\n            <tr>\r\n                ${columns.map(col => `<th>${col.label}</th>`).join('')}\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>            \r\n        </tbody>\r\n    `;\r\n\r\n    const tbody = table.querySelector('tbody');\r\n\r\n    let data = await loadData();\r\n\r\n    data.forEach(item => {\r\n        const row = document.createElement('tr');\r\n        columns.forEach(column => {\r\n            const tableData = document.createElement('td');\r\n            tableData.textContent = column.prop(item);\r\n            row.appendChild(tableData);\r\n        });\r\n\r\n        const actionsTableData = document.createElement('td');\r\n\r\n        if (onEdit) {\r\n            const editLink = document.createElement('a');\r\n            editLink.href = 'javascript:;';\r\n            editLink.style.marginRight = '13px';\r\n            editLink.textContent = 'Editar';\r\n            editLink.addEventListener('click', e => {\r\n                e.preventDefault();\r\n                onEdit(item);\r\n            });\r\n            actionsTableData.appendChild(editLink);\r\n        }\r\n\r\n        if (onDelete) {\r\n            const deleteLink = document.createElement('a');\r\n            deleteLink.href = 'javascript:;';\r\n            deleteLink.style.marginRight = '13px';\r\n            deleteLink.textContent = 'Deletar';\r\n            deleteLink.addEventListener('click', e => {\r\n                e.preventDefault();\r\n                onDelete(item);\r\n            });\r\n            actionsTableData.appendChild(deleteLink);\r\n        }\r\n\r\n        row.appendChild(actionsTableData);\r\n        tbody.appendChild(row);\r\n    });\r\n    div.appendChild(table);\r\n    div.style.width = '100%';\r\n    div.style.overflowX = 'auto';\r\n    table.minWidth = '600px';\r\n\r\n    return div;\r\n}","import template from './template';\r\nimport form from '../components/form';\r\nimport service from '../service/users';\r\nimport grid from '../components/grid';\r\nimport {dataToForm} from '../common/form-bind';\r\nimport error from '../dialogs/error'\r\n\r\nconst render = appEl => {\r\n    let formEl, searchInput;\r\n\r\n    const formObj = form({\r\n        fieldCol: 3,\r\n        fields: [\r\n            {type: 'text', label: 'Nome', name: 'name'},\r\n            {type: 'text', label: 'E-mail', name: 'email'},\r\n            {type: 'text', label: 'Telefone', name: 'phone'},\r\n            {type: 'text', label: 'Senha', name: 'password'},\r\n            {type: 'acl', label: 'Acesso', name: 'acl', fieldCol: 12},\r\n            {type: 'submit', label: 'Salvar'}\r\n        ],\r\n        onSubmit(data, e) {\r\n            const errors = service.validate(data);\r\n            if (errors) {\r\n                return error(errors);\r\n            }\r\n\r\n            if (e.target.dataset.id) {\r\n                service.update(e.target.dataset.id, data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Usuário atualizado com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            } else {\r\n                service.create(data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Usuário salvo com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            }\r\n        }\r\n    });\r\n        \r\n    const wrpEl = document.createElement('div');\r\n    const mainEl = createEls('div', '', wrpEl, [\r\n        {tag: 'h2', textContent: 'Cadastro de usuários'},\r\n        formObj,\r\n        {tag: 'div', className: 'row', children: [\r\n            {tag: 'div', className: 'col-md-8'},\r\n            {tag: 'div', className: 'col-md-4 pl-4 pt-2 pb-2', children: [\r\n                {tag: 'input', className: 'form-control', attrs: {placeholder: 'Pesquisar'},\r\n                    bootstrap: el => searchInput = el}\r\n            ]}\r\n        ]}\r\n    ])\r\n\r\n    formEl = mainEl.querySelector('form')\r\n    const loadData = () => service.retrieve(searchInput.value)    \r\n\r\n    const renderGrid = async () => {\r\n        const oldGrid = mainEl.querySelector('table');\r\n        if (oldGrid) {\r\n            mainEl.removeChild(oldGrid);\r\n        }\r\n        const gridEl = await grid({\r\n            columns: [\r\n                {label: 'Nome', prop: user => user.name },\r\n                {label: 'E-mail', prop: user => user.email },\r\n                {label: 'Telefone', prop: user => user.phone }\r\n            ],\r\n\r\n            loadData() {\r\n                return loadData();\r\n            },\r\n    \r\n            onEdit(user) {\r\n                dataToForm(user, formEl);\r\n                formEl.querySelector('input').focus();\r\n                formEl.dataset.id = user.id;\r\n            },\r\n    \r\n            onDelete(user) {\r\n                service.destroy(user.id).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Usuário excluído com sucesso'\r\n                    });\r\n                    window.location.reload();    \r\n                });\r\n            }\r\n        })\r\n        mainEl.appendChild(gridEl);\r\n    };\r\n\r\n    searchInput.addEventListener('keyup', () => {\r\n        window.searchTimeout && window.clearTimeout(window.searchTimeout);\r\n        window.searchTimeout = setTimeout(renderGrid, 700);\r\n    });\r\n\r\n    renderGrid();\r\n    appEl.appendChild(template(wrpEl, 'user'));\r\n};\r\n\r\n\r\nexport default render;","import config from '../config';\r\nimport headers from './headers'\r\n\r\nexport default {\r\n\r\n    validate(data) {\r\n        let errors = '';\r\n\r\n        if (! data.name) {\r\n            errors += ' Informe o nome.';\r\n        }\r\n\r\n        if (! data.description) {\r\n            errors += ' Informe a descrição.';\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    retrieve: async search => {\r\n        let response = await fetch(`${config.API_URL}/cms/menu/${encodeURIComponent(search)}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n\r\n    create: async user => {\r\n        const response = await fetch(`${config.API_URL}/cms/menu/`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(user)\r\n        });\r\n\r\n        let newUser = await response.json();\r\n\r\n        return newUser;\r\n    },\r\n\r\n\r\n    update: async (id, user) => {\r\n        const params = {id};\r\n        for (let i in user) {\r\n            params[`${i}`] = user[i];\r\n        }\r\n        const response = await fetch(`${config.API_URL}/cms/menu/${id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params),\r\n            headers\r\n        });\r\n\r\n        let newUser = await response.json();\r\n\r\n        return newUser;\r\n    },\r\n\r\n\r\n    destroy: async id => fetch(`${config.API_URL}/cms/menu/${id}`, {\r\n        headers,\r\n        method: 'DELETE'\r\n    })\r\n\r\n}","import template from './template';\r\nimport form from '../components/form';\r\nimport service from '../service/menus';\r\nimport grid from '../components/grid';\r\nimport {dataToForm} from '../common/form-bind';\r\nimport error from '../dialogs/error';\r\n\r\nconst render = appEl => {\r\n    let formEl, searchInput;\r\n\r\n    const formObj = form({\r\n        fieldCol: 3,\r\n        fields: [\r\n            {type: 'text', label: 'Nome', name: 'name'},\r\n            {type: 'text', label: 'Descrição', name: 'description'},\r\n            {type: 'number', label: 'Ordem', name: 'order'},\r\n            {type: 'submit', label: 'Salvar'}\r\n        ],\r\n        onSubmit(data, e) {\r\n            const errors = service.validate(data);\r\n            if (errors) {\r\n                return error(errors);\r\n            }\r\n\r\n            if (e.target.dataset.id) {\r\n                service.update(e.target.dataset.id, data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Menu atualizado com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            } else {\r\n                service.create(data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Menu salvo com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            }\r\n        }\r\n    });\r\n        \r\n    const wrpEl = document.createElement('div');\r\n    const mainEl = createEls('div', '', wrpEl, [\r\n        {tag: 'h2', textContent: 'Cadastro de menus do site'},\r\n        formObj,\r\n        {tag: 'div', className: 'row', children: [\r\n            {tag: 'div', className: 'col-md-8'},\r\n            {tag: 'div', className: 'col-md-4 pl-4 pt-2 pb-2', children: [\r\n                {tag: 'input', className: 'form-control', attrs: {placeholder: 'Pesquisar'},\r\n                    bootstrap: el => searchInput = el}\r\n            ]}\r\n        ]}\r\n    ])\r\n\r\n    formEl = mainEl.querySelector('form')\r\n    const loadData = () => service.retrieve(searchInput.value)    \r\n\r\n    const renderGrid = async () => {\r\n        const oldGrid = mainEl.querySelector('table');\r\n        if (oldGrid) {\r\n            mainEl.removeChild(oldGrid);\r\n        }\r\n        const gridEl = await grid({\r\n            columns: [\r\n                {label: 'Nome', prop: menu => menu.name },\r\n                {label: 'Descrição', prop: menu => menu.description },\r\n                {label: 'Ordem', prop: menu => menu.order }\r\n            ],\r\n\r\n            loadData() {\r\n                return loadData();\r\n            },\r\n    \r\n            onEdit(menu) {\r\n                dataToForm(menu, formEl);\r\n                formEl.querySelector('input').focus();\r\n                formEl.dataset.id = menu.id;\r\n            },\r\n    \r\n            onDelete(menu) {\r\n                service.destroy(menu.id).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Menu excluído com sucesso'\r\n                    });\r\n                    window.location.reload();    \r\n                });\r\n            }\r\n        })\r\n        mainEl.appendChild(gridEl);\r\n    };\r\n\r\n    searchInput.addEventListener('keyup', () => {\r\n        window.searchTimeout && window.clearTimeout(window.searchTimeout);\r\n        window.searchTimeout = setTimeout(renderGrid, 700);\r\n    });\r\n\r\n    renderGrid();\r\n    appEl.appendChild(template(wrpEl, 'menu'));\r\n};\r\n\r\n\r\nexport default render;","import config from '../config';\r\nimport headers from './headers'\r\n\r\nexport default {\r\n\r\n    validate(data) {\r\n        let errors = '';\r\n\r\n        if (! data.title) {\r\n            errors += ' Informe o título.';\r\n        }\r\n\r\n        if (! data.description) {\r\n            errors += ' Informe a descrição.';\r\n        }\r\n\r\n        if (! data.text) {\r\n            errors += ' Digite um texto.';\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    retrieve: async search => {\r\n        let response = await fetch(`${config.API_URL}/cms/article/${encodeURIComponent(search)}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n\r\n    create: async article => {\r\n        const response = await fetch(`${config.API_URL}/cms/article/`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(article)\r\n        });\r\n\r\n        let newArticle = await response.json();\r\n\r\n        return newArticle;\r\n    },\r\n\r\n\r\n    update: async (id, article) => {\r\n        const params = {id};\r\n        for (let i in article) {\r\n            params[`${i}`] = article[i];\r\n        }\r\n        const response = await fetch(`${config.API_URL}/cms/article/${id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params),\r\n            headers\r\n        });\r\n\r\n        let newArticle = await response.json();\r\n\r\n        return newArticle;\r\n    },\r\n\r\n\r\n    destroy: async id => fetch(`${config.API_URL}/cms/article/${id}`, {\r\n        headers,\r\n        method: 'DELETE'\r\n    })\r\n\r\n}","import template from './template';\r\nimport form from '../components/form';\r\nimport service from '../service/articles';\r\nimport menuSrv from '../service/menus';\r\nimport grid from '../components/grid';\r\nimport {dataToForm} from '../common/form-bind';\r\nimport error from '../dialogs/error';\r\n\r\nconst render = appEl => {\r\n    let formEl, searchInput;\r\n\r\n    const formObj = form({\r\n        fieldCol: 3,\r\n        fields: [\r\n            {type: 'text', label: 'Título', name: 'title'},\r\n            {type: 'text', label: 'Descrição', name: 'description'},\r\n            {type: 'single-entity', label: 'Menu', name: 'menu', etity: 'menu', service: menuSrv, descriptionField: 'name'},\r\n            {type: 'wysiwyg', name: 'text', fieldCol: 12},\r\n            {type: 'submit', label: 'Salvar'}\r\n        ],\r\n        onSubmit(data, e) {\r\n            const errors = service.validate(data);\r\n            if (errors) {\r\n                return error(errors);\r\n            }\r\n\r\n            if (e.target.dataset.id) {\r\n                service.update(e.target.dataset.id, data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Artigo atualizado com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            } else {\r\n                service.create(data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Artigo salvo com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            }\r\n        }\r\n    });\r\n        \r\n    const wrpEl = document.createElement('div');\r\n    const mainEl = createEls('div', '', wrpEl, [\r\n        {tag: 'h2', textContent: 'Cadastro de Artigos'},\r\n        formObj,\r\n        {tag: 'div', className: 'row', children: [\r\n            {tag: 'div', className: 'col-md-8'},\r\n            {tag: 'div', className: 'col-md-4 pl-4 pt-2 pb-2', children: [\r\n                {tag: 'input', className: 'form-control', attrs: {placeholder: 'Pesquisar'},\r\n                    bootstrap: el => searchInput = el}\r\n            ]}\r\n        ]}\r\n    ])\r\n\r\n    formEl = mainEl.querySelector('form')\r\n    const loadData = () => service.retrieve(searchInput.value)    \r\n\r\n    const renderGrid = async () => {\r\n        const oldGrid = mainEl.querySelector('table');\r\n        if (oldGrid) {\r\n            mainEl.removeChild(oldGrid);\r\n        }\r\n        const gridEl = await grid({\r\n            columns: [\r\n                {label: 'Título', prop: article => article.title },\r\n                {label: 'Descrição', prop: article => article.description },\r\n                {label: 'Menu', prop: article => (article.menu || {}).name || '' }\r\n            ],\r\n\r\n            loadData() {\r\n                return loadData();\r\n            },\r\n    \r\n            onEdit(article) {\r\n                dataToForm(article, formEl);\r\n                formEl.querySelector('input').focus();\r\n                formEl.dataset.id = article.id;\r\n            },\r\n    \r\n            onDelete(article) {\r\n                service.destroy(article.id).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Artigo excluído com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            }\r\n        })\r\n        mainEl.appendChild(gridEl);\r\n    };\r\n\r\n    searchInput.addEventListener('keyup', () => {\r\n        window.searchTimeout && window.clearTimeout(window.searchTimeout);\r\n        window.searchTimeout = setTimeout(renderGrid, 700);\r\n    });\r\n\r\n    renderGrid();\r\n    appEl.appendChild(template(wrpEl, 'article'));\r\n};\r\n\r\n\r\nexport default render;","import config from '../config';\r\nimport headers from './headers'\r\n\r\nexport default {\r\n\r\n    async findById(id) {\r\n        let response = await fetch(`${config.API_URL}/cms/product/id/${id}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n    validate(data) {\r\n        let errors = '';\r\n\r\n        if (! data.name) {\r\n            errors += ' Informe o nome.';\r\n        }\r\n\r\n        if (! data.short_description) {\r\n            errors += ' Informe a descrição curta.';\r\n        }\r\n\r\n        if (! (data.photos && data.photos.length)) {\r\n            errors += ' Selecione uma foto.';\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    retrieve: async search => {\r\n        let response = await fetch(`${config.API_URL}/cms/product/${encodeURIComponent(search)}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n\r\n    create: async product => {\r\n        const response = await fetch(`${config.API_URL}/cms/product/`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(product)\r\n        });\r\n\r\n        let newUser = await response.json();\r\n\r\n        return newUser;\r\n    },\r\n\r\n\r\n    update: async (id, product) => {\r\n        const params = {id};\r\n        for (let i in product) {\r\n            params[`${i}`] = product[i];\r\n        }\r\n        const response = await fetch(`${config.API_URL}/cms/product/${id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params),\r\n            headers\r\n        });\r\n\r\n        let newUser = await response.json();\r\n\r\n        return newUser;\r\n    },\r\n\r\n\r\n    destroy: async id => fetch(`${config.API_URL}/cms/product/${id}`, {\r\n        headers,\r\n        method: 'DELETE'\r\n    }),\r\n\r\n    createImage: async (id, image) => fetch(`${config.API_URL}/cms/product/image`, {\r\n        body: JSON.stringify({id, image}),\r\n        headers,\r\n        method: 'POST'\r\n    }).then(res => res.json()),\r\n\r\n    destroyImage: async id => fetch(`${config.API_URL}/cms/product/image/${id}`, {\r\n        headers,\r\n        method: 'DELETE'\r\n    })\r\n\r\n}","import template from './template';\r\nimport form from '../components/form';\r\nimport service from '../service/products';\r\nimport grid from '../components/grid';\r\nimport {dataToForm} from '../common/form-bind';\r\nimport error from '../dialogs/error';\r\nimport { priceFormat } from '../common/number';\r\n\r\nconst render = appEl => {\r\n    let formEl, searchInput;\r\n\r\n    const formObj = form({\r\n        fieldCol: 3,\r\n        fields: [\r\n            {type: 'text', label: 'Nome', name: 'name'},\r\n            {type: 'text', label: 'Descrição', name: 'short_description'},\r\n            {type: 'text', label: 'Grupo (categoria)', name: 'group'},\r\n            {type: 'number', label: 'Valor', name: 'price', step: '0.01', min: 0},\r\n            {type: 'wysiwyg', name: 'long_description', fieldCol: 12},\r\n            {type: 'image-list', name: 'photos', label: 'Fotos', fieldCol: 12, service},\r\n            {type: 'submit', label: 'Salvar'}\r\n        ],\r\n        onSubmit(data, e) {\r\n            const errors = service.validate(data);\r\n            if (errors) {\r\n                return error(errors);\r\n            }\r\n\r\n            if (e.target.dataset.id) {\r\n                service.update(e.target.dataset.id, data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Produto atualizado com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            } else {\r\n                service.create(data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Produto salvo com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            }\r\n        }\r\n    });\r\n        \r\n    const wrpEl = document.createElement('div');\r\n    const mainEl = createEls('div', '', wrpEl, [\r\n        {tag: 'h2', textContent: 'Cadastro de Produtos'},\r\n        formObj,\r\n        {tag: 'div', className: 'row', children: [\r\n            {tag: 'div', className: 'col-md-8'},\r\n            {tag: 'div', className: 'col-md-4 pl-4 pt-2 pb-2', children: [\r\n                {tag: 'input', className: 'form-control', attrs: {placeholder: 'Pesquisar'},\r\n                    bootstrap: el => searchInput = el}\r\n            ]}\r\n        ]}\r\n    ])\r\n\r\n    formEl = mainEl.querySelector('form')\r\n    const loadData = () => service.retrieve(searchInput.value)    \r\n\r\n    const renderGrid = async () => {\r\n        const oldGrid = mainEl.querySelector('table');\r\n        if (oldGrid) {\r\n            mainEl.removeChild(oldGrid);\r\n        }\r\n        const gridEl = await grid({\r\n            columns: [\r\n                {label: 'Nome', prop: product => product.name },\r\n                {label: 'Descrição curta', prop: product => product.short_description },\r\n                {label: 'Grupo', prop: product => product.group },\r\n                {label: 'Valor', prop: product => priceFormat(product.price) }\r\n            ],\r\n\r\n            loadData() {\r\n                return loadData();\r\n            },\r\n    \r\n            onEdit(product) {\r\n                service.findById(product.id).then(product => {\r\n                    dataToForm(product, formEl);\r\n                    formEl.querySelector('input').focus();\r\n                    formEl.dataset.id = product.id;\r\n                });\r\n            },\r\n    \r\n            onDelete(product) {\r\n                service.destroy(product.id).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Produto excluído com sucesso'\r\n                    });\r\n                    window.location.reload();    \r\n                });\r\n            }\r\n        })\r\n        mainEl.appendChild(gridEl);\r\n    };\r\n\r\n    searchInput.addEventListener('keyup', () => {\r\n        window.searchTimeout && window.clearTimeout(window.searchTimeout);\r\n        window.searchTimeout = setTimeout(renderGrid, 700);\r\n    });\r\n\r\n    renderGrid();\r\n    appEl.appendChild(template(wrpEl, 'product'));\r\n};\r\n\r\n\r\nexport default render;","import config from '../config';\r\nimport headers from './headers'\r\n\r\nexport default {\r\n\r\n    validate(data) {\r\n        let errors = '';\r\n\r\n        if (! data.name) {\r\n            errors += ' Informe um nome único';\r\n        }\r\n\r\n        if (! (data.strval && data.textval)) {\r\n            errors += ' Informe a descrição.';\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    retrieve: async search => {\r\n        let response = await fetch(`${config.API_URL}/cms/macros/${encodeURIComponent(search)}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n\r\n    create: async macro => {\r\n        const response = await fetch(`${config.API_URL}/cms/macros/`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(macro)\r\n        });\r\n\r\n        let newUser = await response.json();\r\n\r\n        return newUser;\r\n    },\r\n\r\n\r\n    update: async (id, macro) => {\r\n        const params = {id};\r\n        for (let i in macro) {\r\n            params[`${i}`] = macro[i];\r\n        }\r\n        const response = await fetch(`${config.API_URL}/cms/macros/${id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params),\r\n            headers\r\n        });\r\n\r\n        let newUser = await response.json();\r\n\r\n        return newUser;\r\n    },\r\n\r\n\r\n    destroy: async id => fetch(`${config.API_URL}/cms/macros/${id}`, {\r\n        headers,\r\n        method: 'DELETE'\r\n    })\r\n\r\n}","import { emitEvent } from '../common/event';\r\nimport imageResize from '../common/image-resize';\r\nimport macroSrv from '../service/macros';\r\nimport msg from '../dialogs/msg';\r\n\r\nfunction getMacroInput(list, macro={}) {\r\n    const placeholder = 'Conteúdo';\r\n\r\n    switch(macro.type) {\r\n        case '3':\r\n            return {tag: 'div', className: 'form-group', children: [\r\n                \r\n                macro.textval ? \r\n                    {tag: 'div', className: 'mb-2', children: [\r\n                        {tag: 'img', attrs: {src: macro.textval, alt: 'Imagem selecionada', width: 150}}\r\n                    ]} : {tag: 'span'},\r\n\r\n                {tag: 'button', className: 'btn btn-primary', textContent: 'Abrir imagem', on: ['click', e => {\r\n                        selectImage({\r\n                            forceFile: true\r\n                        }).then(image => imageResize(image, {width: 800, height: 400}, 1).then(image => {\r\n                            macro.textval = image;\r\n                            emitEvent('macros:refresh', list);\r\n                        }));\r\n                    }]\r\n                }\r\n            ]};\r\n        case '2':\r\n            return {tag: 'div', className: 'form-group', children: [\r\n                {tag: 'textarea', className: 'form-control', bootstrap: el => el.innerHTML = macro.textval || '',\r\n                    attrs: {name: macro.name, placeholder, rows: 10}, on: ['change', e => {\r\n                        macro.textval = e.target.value;\r\n                    }]\r\n                }\r\n            ]};\r\n        default:\r\n            return {tag: 'div', className: 'form-group', children: [\r\n                {tag: 'input', className: 'form-control', \r\n                    attrs: {type: 'text', name: macro.name, placeholder, value: macro.strval || ''}, on: ['change', e => {\r\n                        macro.strval = e.target.value;\r\n                    }]\r\n                }\r\n            ]}\r\n    }\r\n}\r\n\r\nexport default list => ({\r\n    tag: 'div',\r\n    className: 'macro',\r\n    children: list.length ? (\r\n        list.map(macroData => ({tag: 'div', className: 'card mb-5', children: [\r\n            {tag: 'div', className: 'card-body', children: [\r\n                {tag: 'div', className: 'row mb-4', children: [\r\n                    {tag: 'div', className: 'col-md-6', children: [\r\n                        {tag: 'input', className: 'form-control', attrs: {type: 'text', placeholder: 'Nome único', value: macroData.name || ''}, \r\n                                on: ['change', e => {\r\n                            macroData.name = e.target.value;\r\n                        }]}\r\n                    ]},\r\n                    {tag: 'div', className: 'col-md-6 text-md-right', children: [\r\n                        {tag: 'select', className: 'form-control', children: [\r\n                            {tag: 'option', attrs: {value: '1'}, textContent: 'Texto pequeno'},\r\n                            {tag: 'option', attrs: {value: '2'}, textContent: 'Texto extenso'},\r\n                            {tag: 'option', attrs: {value: '3'}, textContent: 'Imagem'}\r\n                        ], on: ['change', e => {\r\n                            macroData.type = e.target.value;\r\n                            emitEvent('macros:refresh', list);\r\n                        }], bootstrap: el => el.value = macroData.type }\r\n                    ]}\r\n                ]},\r\n\r\n                getMacroInput(list, macroData),\r\n\r\n                {tag: 'div', children: [\r\n                    macroData.__state === 'edition' ? (\r\n                        {tag: 'div', className: 'text-md-right', children: [\r\n                            {tag: 'button', className: 'btn btn-default', textContent: 'Cancelar', on: ['click', () => {\r\n                                if (! macroData.id) {\r\n                                    list.splice(list.indexOf(macroData), 1);\r\n                                }\r\n                                macroData.__state = '';\r\n                                emitEvent('macros:refresh', list);\r\n                            }]},\r\n                            {tag: 'button', className: 'btn btn-success', textContent: 'Salvar', on: ['click', async () => {\r\n                                try {\r\n                                    if (macroData.id) {\r\n                                        await macroSrv.update(macroData.id, macroData);\r\n                                    } else {\r\n                                        await macroSrv.create(macroData);\r\n                                    }\r\n                                } catch (e) {\r\n                                    return msg(e.msg || 'Erro ao salvar texto geral');\r\n                                }\r\n                                \r\n                                msg('Salvo com sucesso', 'success');                               \r\n                            }]}\r\n                        ]}\r\n                    ) : (\r\n                        {tag: 'div', className: 'text-md-right', children: [\r\n                            {tag: 'button', className: 'btn btn-danger', textContent: 'Deletar', on: ['click', () => {                                \r\n                                const done = () => {\r\n                                    list.splice(list.indexOf(macroData), 1);\r\n                                    emitEvent('macros:refresh', list);\r\n                                };\r\n                                if (macroData.id) {\r\n                                    return macroSrv.destroy(macroData.id).then(done)\r\n                                }\r\n                                done()\r\n                            }]},\r\n\r\n                            {tag: 'button', className: 'btn btn-primary', textContent: 'Editar', on: ['click', () => {\r\n                                macroData.__state = 'edition';\r\n                                emitEvent('macros:refresh', list);\r\n                            }]}\r\n                        ]}\r\n                    )\r\n                ]}\r\n            ]}\r\n        ]}))\r\n    ) : (\r\n        [\r\n            {tag: 'div', className: 'card-body', children: [\r\n                {tag: 'h3', className: 'text-warning', textContent: 'Nenhum conteúdo inserido'}\r\n            ]}\r\n        ]\r\n    )\r\n})","import template from './template';\r\nimport icon from './icon';\r\nimport macro from './macro';\r\nimport { addEvent } from '../common/event';\r\nimport service from '../service/macros';\r\n\r\nconst render = async appEl => {\r\n    const wrpEl = document.createElement('div');\r\n    const render = (macros=[]) => {\r\n        wrpEl.innerHTML = '';\r\n        createEls('div', '', wrpEl, [\r\n            {tag: 'div', className: 'row', children: [\r\n                {tag: 'div', className: 'col-md-9', children: [\r\n                    {tag: 'h2', textContent: 'Cadastro de textos gerais', className: 'mb-3'}\r\n                ]},\r\n                {tag: 'div', className: 'col-md-3 pt-2 text-md-right', children: [\r\n                    {tag: 'a', attrs: {href: 'javascript:;'}, children: [\r\n                        icon('add', 32, 32)                        \r\n                    ]}\r\n                ], on: ['click', () => {\r\n                    macros.push({__state: 'edition'});\r\n                    render(macros);\r\n                }]}\r\n            ]},\r\n            macro(macros)\r\n        ]);\r\n        addEvent('macros:refresh', macros => render(macros));\r\n    };\r\n        \r\n    appEl.appendChild(template(wrpEl, 'macros'));\r\n    const macros = await service.retrieve('');\r\n    render(macros);\r\n};\r\n\r\nexport default render;\r\n","import config from '../config';\r\nimport headers from './headers'\r\n\r\nexport default {\r\n\r\n    async findById(id) {\r\n        let response = await fetch(`${config.API_URL}/cms/new/id/${id}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n    validate(data) {\r\n        let errors = '';\r\n\r\n        if (! data.title) {\r\n            errors += ' Informe o título.';\r\n        }\r\n\r\n        if (! data.description) {            \r\n            errors += ' Informe a descrição.';\r\n        }\r\n\r\n        if (! data.abstract) {\r\n            errors += ' Digite um resumo.';\r\n        }\r\n\r\n        if (! data.text) {\r\n            errors += ' Digite um texto.';\r\n        }\r\n\r\n        if (! data.cover) {\r\n            errors += ' Selecione uma foto de capa.';\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    retrieve: async search => {\r\n        let response = await fetch(`${config.API_URL}/cms/new/${encodeURIComponent(search)}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n\r\n    create: async notice => {\r\n        const response = await fetch(`${config.API_URL}/cms/new/`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(notice)\r\n        });\r\n\r\n        let newNotice = await response.json();\r\n\r\n        return newNotice;\r\n    },\r\n\r\n\r\n    update: async (id, notice) => {\r\n        const params = {id};\r\n        for (let i in notice) {\r\n            params[`${i}`] = notice[i];\r\n        }\r\n        const response = await fetch(`${config.API_URL}/cms/new/${id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params),\r\n            headers\r\n        });\r\n\r\n        let newNotice = await response.json();\r\n\r\n        return newNotice;\r\n    },\r\n\r\n\r\n    destroy: async id => fetch(`${config.API_URL}/cms/new/${id}`, {\r\n        headers,\r\n        method: 'DELETE'\r\n    })\r\n\r\n}","import template from './template';\r\nimport form from '../components/form';\r\nimport service from '../service/news';\r\nimport grid from '../components/grid';\r\nimport {dataToForm} from '../common/form-bind';\r\nimport error from '../dialogs/error';\r\nimport menuSrv from '../service/menus';\r\nimport { commonToPtBr } from '../common/date-format';\r\n\r\nconst render = appEl => {\r\n    let formEl, searchInput;\r\n\r\n    const formObj = form({\r\n        fieldCol: 3,\r\n        fields: [\r\n            {type: 'text', label: 'Título', name: 'title'},\r\n            {type: 'text', label: 'Descrição', name: 'description'},\r\n            {type: 'text', label: 'Autor', name: 'author'},\r\n            {type: 'date', label: 'Data de publicação', name: 'published_at'},\r\n            {type: 'single-entity', label: 'Menu', name: 'menu', etity: 'menu', service: menuSrv, descriptionField: 'name'},\r\n            {type: 'wysiwyg', label: 'Resumo', name: 'abstract', fieldCol: '12'},\r\n            {type: 'wysiwyg', label: 'Texto', name: 'text', fieldCol: '12'},\r\n            {type: 'single-image', label: 'Capa', name: 'cover'},\r\n            {type: 'spacing'},\r\n            {type: 'spacing'},\r\n            {type: 'submit', label: 'Salvar'}\r\n        ],\r\n        onSubmit(data, e) {\r\n            const errors = service.validate(data);\r\n            if (errors) {\r\n                return error(errors);\r\n            }\r\n\r\n            if (e.target.dataset.id) {\r\n                service.update(e.target.dataset.id, data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Notícia atualizada com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            } else {\r\n                service.create(data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Notícia salva com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            }\r\n        }\r\n    });\r\n        \r\n    const wrpEl = document.createElement('div');\r\n    const mainEl = createEls('div', '', wrpEl, [\r\n        {tag: 'h2', textContent: 'Cadastro de Notícias'},\r\n        formObj,\r\n        {tag: 'div', className: 'row', children: [\r\n            {tag: 'div', className: 'col-md-8'},\r\n            {tag: 'div', className: 'col-md-4 pl-4 pt-2 pb-2', children: [\r\n                {tag: 'input', className: 'form-control', attrs: {placeholder: 'Pesquisar'},\r\n                    bootstrap: el => searchInput = el}\r\n            ]}\r\n        ]}\r\n    ])    \r\n\r\n    formEl = mainEl.querySelector('form')\r\n    const loadData = () => service.retrieve(searchInput.value)    \r\n\r\n    const renderGrid = async () => {\r\n        const oldGrid = mainEl.querySelector('table');\r\n        if (oldGrid) {\r\n            mainEl.removeChild(oldGrid);\r\n        }\r\n        const gridEl = await grid({\r\n            columns: [\r\n                {label: 'Data', prop: notice => commonToPtBr(notice.published_at) },\r\n                {label: 'Nome', prop: notice => notice.title }\r\n            ],\r\n\r\n            loadData() {\r\n                return loadData();\r\n            },\r\n    \r\n            onEdit(notice) {\r\n                service.findById(notice.id).then(notice => {\r\n                    dataToForm(notice, formEl);\r\n                    formEl.querySelector('input').focus();\r\n                    formEl.dataset.id = notice.id;\r\n                });\r\n            },\r\n    \r\n            onDelete(notice) {\r\n                service.destroy(notice.id).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Notícia excluída com sucesso'\r\n                    });\r\n                    window.location.reload();    \r\n                });\r\n            }\r\n        })\r\n        mainEl.appendChild(gridEl);\r\n    };\r\n\r\n    searchInput.addEventListener('keyup', () => {\r\n        window.searchTimeout && window.clearTimeout(window.searchTimeout);\r\n        window.searchTimeout = setTimeout(renderGrid, 700);\r\n    });\r\n\r\n    renderGrid();\r\n    appEl.appendChild(template(wrpEl, 'new'));\r\n};\r\n\r\n\r\nexport default render;","import config from '../config';\r\nimport headers from './headers'\r\n\r\nexport default {\r\n\r\n    async findById(id) {\r\n        let response = await fetch(`${config.API_URL}/cms/cover/id/${id}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n    validate(data) {\r\n        let errors = '';\r\n\r\n        if (! data.name) {\r\n            errors += ' Informe o título (nome).';\r\n        }\r\n\r\n        if (! data.description) {            \r\n            errors += ' Informe a descrição.';\r\n        }\r\n\r\n        if (! data.group) {\r\n            errors += ' Selecione um grupo.';\r\n        }\r\n\r\n        if (! data.cover) {\r\n            errors += ' Selecione uma foto de capa.';\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    retrieve: async search => {\r\n        let response = await fetch(`${config.API_URL}/cms/cover/${encodeURIComponent(search)}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n\r\n    create: async cover => {\r\n        const response = await fetch(`${config.API_URL}/cms/cover/`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(cover)\r\n        });\r\n\r\n        let newCover = await response.json();\r\n\r\n        return newCover;\r\n    },\r\n\r\n\r\n    update: async (id, cover) => {\r\n        const params = {id};\r\n        for (let i in cover) {\r\n            params[`${i}`] = cover[i];\r\n        }\r\n        const response = await fetch(`${config.API_URL}/cms/cover/${id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params),\r\n            headers\r\n        });\r\n\r\n        let newCover = await response.json();\r\n\r\n        return newCover;\r\n    },\r\n\r\n\r\n    destroy: async id => fetch(`${config.API_URL}/cms/cover/${id}`, {\r\n        headers,\r\n        method: 'DELETE'\r\n    })\r\n\r\n}","import template from './template';\r\nimport form from '../components/form';\r\nimport service from '../service/covers';\r\nimport grid from '../components/grid';\r\nimport {dataToForm} from '../common/form-bind';\r\nimport error from '../dialogs/error';\r\n\r\nconst render = appEl => {\r\n    let formEl, searchInput;\r\n\r\n    const formObj = form({\r\n        fieldCol: 3,\r\n        fields: [\r\n            {type: 'text', label: 'Título (nome)', name: 'name'},\r\n            {type: 'text', label: 'Descrição', name: 'description'},\r\n            {type: 'text', label: 'Grupo', name: 'group'},\r\n            {type: 'spacing'},\r\n            {type: 'single-image', label: 'Foto de capa', name: 'cover'},\r\n            {type: 'submit', label: 'Salvar'}\r\n        ],\r\n        onSubmit(data, e) {\r\n            const errors = service.validate(data);\r\n            if (errors) {\r\n                return error(errors);\r\n            }\r\n\r\n            if (e.target.dataset.id) {\r\n                service.update(e.target.dataset.id, data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Notícia atualizada com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            } else {\r\n                service.create(data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Notícia salva com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            }\r\n        }\r\n    });\r\n        \r\n    const wrpEl = document.createElement('div');\r\n    const mainEl = createEls('div', '', wrpEl, [\r\n        {tag: 'h2', textContent: 'Cadastro de Fotos de capa'},\r\n        formObj,\r\n        {tag: 'div', className: 'row', children: [\r\n            {tag: 'div', className: 'col-md-8'},\r\n            {tag: 'div', className: 'col-md-4 pl-4 pt-2 pb-2', children: [\r\n                {tag: 'input', className: 'form-control', attrs: {placeholder: 'Pesquisar'},\r\n                    bootstrap: el => searchInput = el}\r\n            ]}\r\n        ]}\r\n    ])    \r\n\r\n    formEl = mainEl.querySelector('form')\r\n    const loadData = () => service.retrieve(searchInput.value)    \r\n\r\n    const renderGrid = async () => {\r\n        const oldGrid = mainEl.querySelector('table');\r\n        if (oldGrid) {\r\n            mainEl.removeChild(oldGrid);\r\n        }\r\n        const gridEl = await grid({\r\n            columns: [\r\n                {label: 'Nome', prop: cover => cover.name },\r\n                {label: 'Descrição', prop: cover => cover.description }\r\n            ],\r\n\r\n            loadData() {\r\n                return loadData();\r\n            },\r\n    \r\n            onEdit(cover) {\r\n                service.findById(cover.id).then(cover => {\r\n                    dataToForm(cover, formEl);\r\n                    formEl.querySelector('input').focus();\r\n                    formEl.dataset.id = cover.id;\r\n                });\r\n            },\r\n    \r\n            onDelete(cover) {\r\n                service.destroy(cover.id).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Capa excluída com sucesso'\r\n                    });\r\n                    window.location.reload();    \r\n                });\r\n            }\r\n        })\r\n        mainEl.appendChild(gridEl);\r\n    };\r\n\r\n    searchInput.addEventListener('keyup', () => {\r\n        window.searchTimeout && window.clearTimeout(window.searchTimeout);\r\n        window.searchTimeout = setTimeout(renderGrid, 700);\r\n    });\r\n\r\n    renderGrid();\r\n    appEl.appendChild(template(wrpEl, 'cover'));\r\n};\r\n\r\n\r\nexport default render;","import config from '../config';\r\nimport headers from './headers'\r\n\r\nexport default {\r\n\r\n    async findById(id) {\r\n        let response = await fetch(`${config.API_URL}/cms/event/id/${id}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n    validate(data) {\r\n        let errors = '';\r\n\r\n        if (! data.description) {\r\n            errors += ' Informe a descrição.';\r\n        }\r\n\r\n        if (! data.start) {\r\n            errors += ' Informe o início.';\r\n        }\r\n\r\n        if (! data.end) {\r\n            errors += ' Informe o término.';\r\n        }\r\n\r\n        return errors;\r\n    },\r\n\r\n    retrieve: async search => {\r\n        let response = await fetch(`${config.API_URL}/cms/event/${encodeURIComponent(search)}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n    findByRange: async (start, end) => {\r\n        const dateRange = `${encodeURIComponent(start+'')}/${encodeURIComponent(end+'')}`;\r\n        let response = await fetch(`${config.API_URL}/cms/event/date-range/${dateRange}`, {headers});\r\n        let json = await response.json();\r\n        return json;\r\n    },\r\n\r\n    create: async event => {\r\n        const response = await fetch(`${config.API_URL}/cms/event/`, {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(event)\r\n        });\r\n\r\n        let newData = await response.json();\r\n\r\n        return newData;\r\n    },\r\n\r\n\r\n    update: async (id, event) => {\r\n        const params = {id};\r\n        for (let i in event) {\r\n            params[`${i}`] = event[i];\r\n        }\r\n        const response = await fetch(`${config.API_URL}/cms/event/${id}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(params),\r\n            headers\r\n        });\r\n\r\n        let newData = await response.json();\r\n\r\n        return newData;\r\n    },\r\n\r\n\r\n    destroy: async id => fetch(`${config.API_URL}/cms/event/${id}`, {\r\n        headers,\r\n        method: 'DELETE'\r\n    })\r\n\r\n}","import template from './template';\r\nimport form from '../components/form';\r\nimport service from '../service/events';\r\nimport articleSrv from '../service/articles';\r\nimport error from '../dialogs/error';\r\nimport calendar from './calendar';\r\nimport { dataToForm } from '../common/form-bind'\r\nimport { commonToPtBr } from '../common/date-format';\r\n\r\nconst render = appEl => {\r\n    let formEl;\r\n    let deleteBtn;\r\n    const formObj = form({\r\n        fieldCol: 3,\r\n        fields: [\r\n            {type: 'text', label: 'Endereço', name: 'address'},\r\n            {type: 'text', label: 'Descrição curta', name: 'description'},\r\n            {type: 'single-entity', label: 'Artigo explicativo', name: 'article_id', etity: 'article', service: articleSrv, descriptionField: 'title'},\r\n            {type: 'datetime', label: 'Início', name: 'start'},\r\n            {type: 'datetime', label: 'Fim', name: 'end'},\r\n            {type: 'submit', label: 'Salvar'}\r\n        ],\r\n        onSubmit(data, e) {\r\n            const errors = service.validate(data);\r\n            if (errors) {\r\n                return error(errors);\r\n            }\r\n\r\n            if (e.target.dataset.id) {\r\n                service.update(e.target.dataset.id, data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Evento atualizado com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            } else {\r\n                service.create(data).then(() => {\r\n                    sessionStorage.flash = JSON.stringify({\r\n                        type: 'success',\r\n                        msg: 'Evento salvo com sucesso'\r\n                    });\r\n                    window.location.reload();\r\n                });\r\n            }\r\n        }\r\n    });\r\n        \r\n    const wrpEl = document.createElement('div');\r\n    const mainEl = createEls('div', '', wrpEl, [\r\n        {tag: 'h2', textContent: 'Cadastro de Eventos'},\r\n        formObj,\r\n        {tag: 'h3', textContent: 'Eventos'},\r\n        {tag: 'div', className: 'row', children: [\r\n            {tag: 'div', className: 'col-md-12', async bootstrap(el) {\r\n                const start = new Date();\r\n                start.setDate(1);\r\n                const end = new Date();\r\n                let events = await service.findByRange(start, end);\r\n                const monthSelected = new Date();\r\n\r\n                const renderCalendar = config => {\r\n                    calendar(el, config);\r\n                };\r\n                const eventFormatter = e => ({\r\n                    id: e.id,\r\n                    date: new Date(e.start),\r\n                    description: e.description\r\n                });\r\n\r\n                const params = {\r\n                    onChangeMonth: async (month, year) => {\r\n                        monthSelected.setMonth(month);\r\n                        monthSelected.setFullYear(year);\r\n                        events = await service.findByRange(start, end);\r\n                        params.month = monthSelected.getMonth();\r\n                        params.year = monthSelected.getFullYear();\r\n                        params.items = events.map(eventFormatter);\r\n                        el.innerHTML = '';\r\n                        renderCalendar(params);\r\n                    },\r\n                    month: monthSelected.getMonth(),\r\n                    year: monthSelected.getFullYear(),\r\n                    items: events.map(eventFormatter),\r\n                    onItemClick: item => {\r\n                        const event = events.find(e => e.id === item.id);\r\n                        event.start = new Date(event.start);\r\n                        event.end = new Date(event.end);\r\n                        event.article_id = event.article;\r\n                        dataToForm(event, formEl);\r\n                        formEl.querySelector('input').focus();\r\n                        formEl.dataset.id = event.id;\r\n                        deleteBtn.style.display = 'inherit';\r\n                    }\r\n                };\r\n\r\n                renderCalendar(params);\r\n            }}\r\n        ]}\r\n    ]);\r\n    wrpEl.appendChild(mainEl);\r\n    formEl = mainEl.querySelector('form');\r\n    createEls('div', 'col-md-12', formEl, [\r\n        {tag: 'button', className: 'btn btn-danger', attrs: {type: 'button'}, textContent: 'Deletar', bootstrap: el => {\r\n            deleteBtn = el;\r\n            el.style.display = 'none';\r\n            el.addEventListener('click', async () => {\r\n                await service.destroy(formEl.dataset.id);\r\n                sessionStorage.flash = JSON.stringify({\r\n                    type: 'success',\r\n                    msg: 'Evento excluído com sucesso'\r\n                });\r\n                window.location.reload();\r\n            });\r\n        }}\r\n    ]);\r\n    formEl.addEventListener('reset', () => deleteBtn.style.display = 'none');\r\n    appEl.appendChild(template(wrpEl, 'event'));\r\n};\r\n\r\n\r\nexport default render;"],"names":["__async","auth","search","user","id","fetch","article","findById","product","macro","appEl","notice","cover","event","bootstrap"],"mappings":"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"}